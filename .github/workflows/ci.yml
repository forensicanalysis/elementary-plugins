name: CI
on:
  push:
    branches: [ master ]
  pull_request:

jobs:

  pytest:
    name: Python Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    steps:
      - uses: actions/setup-python@v2
        with: { python-version: '3.8' }
      - run: pip install pylint pytest pytest-cov
      - name: Checkout code
        uses: actions/checkout@v2
      - run: pip install -r requirements.txt
      - name: Python Lint
        run: pylint * --rcfile test/.pylintrc
        shell: bash
        continue-on-error: true
      - name: Download testdata
        run: bash test/download_testdata.sh
        shell: bash
      - name: Python Test
        run: pytest -v --cov-config .coveragerc --cov-report=xml --cov=. .
        shell: bash
      - name: Upload coverage
        env:
          CI: "true"
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash) -f coverage.xml
        # if: matrix.os == 'windows-latest'
        shell: bash

      - name: Upload
        uses: actions/upload-artifact@master
        with:
          name: forensicstore
          path: ./input.forensicstore

  #integration:
  #  name: Integration Tests
  #  runs-on: ubuntu-latest
  #  strategy:
  #    matrix:
  #      plugin: ['import-image', 'plaso', 'shimcache', 'yara'] # sigma
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v1
  #    - name: Build docker images
  #      run: docker build --tag elementary-${{ matrix.plugin }} ${{ matrix.plugin }}
  #    - name: Download testdata
  #      run: bash test/download_testdata.sh
  #      shell: bash
  #    - name: Download forensicworkflows command
  #      run: |
  #        curl --fail --output ubuntu-latest.zip --location https://github.com/forensicanalysis/forensicworkflows/releases/download/v0.13.1/ubuntu-latest.zip
  #        unzip ubuntu-latest.zip
  #    - name: run import-image
  #      run: ./forensicworkflows run import-image --file test/data/win10_mock.vhd --debug test/data/example1.forensicstore
  #      shell: bash
  #      if: matrix.plugin == 'import-image'
  #    - name: run ${{ matrix.plugin }}
  #      run: ./forensicworkflows run ${{ matrix.plugin }} --format jsonl --debug test/data/example1.forensicstore
  #      shell: bash
  #      if: matrix.plugin != 'import-image'
